n: 05 - p_given: 0.3 - p_actual: 0.1772
n: 05 - p_given: 0.5 - p_actual: 0.2881
n: 05 - p_given: 0.7 - p_actual: 0.3643
n: 05 - p_given: 0.9 - p_actual: 0.4210
n: 10 - p_given: 0.3 - p_actual: 0.1766
n: 10 - p_given: 0.5 - p_actual: 0.2864
n: 10 - p_given: 0.7 - p_actual: 0.3662
n: 10 - p_given: 0.9 - p_actual: 0.4254
n: 15 - p_given: 0.3 - p_actual: 0.1761
n: 15 - p_given: 0.5 - p_actual: 0.2879
n: 15 - p_given: 0.7 - p_actual: 0.3659
n: 15 - p_given: 0.9 - p_actual: 0.4243
n: 20 - p_given: 0.3 - p_actual: 0.1763
n: 20 - p_given: 0.5 - p_actual: 0.2870
n: 20 - p_given: 0.7 - p_actual: 0.3653
n: 20 - p_given: 0.9 - p_actual: 0.4234
n: 25 - p_given: 0.3 - p_actual: 0.1764
n: 25 - p_given: 0.5 - p_actual: 0.2854
n: 25 - p_given: 0.7 - p_actual: 0.3655
n: 25 - p_given: 0.9 - p_actual: 0.4242

def gen_DIG(nodes, p = 0.5):
	G = DIG()
	for n in range(nodes):
		sequence = gen_seq(p)
		G.add_sequence(n, sequence)
	return G

def gen_seq(p):
	o = rn.randint(0,50)
	k = 2**(rn.randint(2,5))+1
	n = rn.randint(0,int(p*40))
	return (o,k,n)

def test_p():
	for n in range(5,26,5):
		for p in [0.3,0.5,0.7,0.9]:
			total = 0
			for i in range(1,10001):
				g = gen_DIG(n, p)
				total += len(g.graph_edges())
			print("n:", n, "p_given:", p, "p_actual:", total / (i*(n*(n-1)/2)))

test_p()